docker-compose -f zk-single-kafka-single.yml up -d

docker-compose -f zk-single-kafka-single.yml -p single-kafka-single-bootstrap  up -d 


docker-compose -f zk-single-kafka-multiple.yml -p  multip-kafka-single-zk  up -d 



docker exec -it kafka1 /bin/bash


--bootstrap-server


# List topics

kafka-topics --bootstrap-server localhost:9092 --list 


# Create a topic (working)
kafka-topics --bootstrap-server localhost:9092 --topic first_topic --create

kafka-topics --bootstrap-server localhost:9092 --topic second_topic --create --partitions 3

kafka-topics --bootstrap-server localhost:9092 --topic third_topic --create --partitions 3 --replication-factor 2

# Delete topics
# (only works if delete.topic.enable=true)

kafka-topics.sh --bootstrap-server localhost:9092 --topic first_topic --delete


# Describe a topic
kafka-topics --bootstrap-server localhost:9092 --topic first_topic --describe

kafka-topics --bootstrap-server localhost:9092 --topic second_topic --describe




##PRODUCER


# producing
kafka-console-producer --bootstrap-server localhost:9092 --topic first_topic 
> Hello World
>My name is Conduktor
>I love Kafka
>^C  (<- Ctrl + C is used to exit the producer)


# producing with properties
kafka-console-producer --bootstrap-server localhost:9092 --topic first_topic --producer-property acks=all
> some message that is acked
> just for fun
> fun learning!


# producing to a non existing topic
kafka-console-producer --bootstrap-server localhost:9092 --topic new_topic
> hello world!


# edit config/server.properties or config/kraft/server.properties
# num.partitions=3

# produce against a non existing topic again
kafka-console-producer --bootstrap-server localhost:9092 --topic new_topic_2
hello again!

# this time our topic has 3 partitions


# produce with keys
kafka-console-producer --bootstrap-server localhost:9092 --topic first_topic --property parse.key=true --property key.separator=:
>example key:example value
>name:Stephane




# consuming
kafka-console-consumer --bootstrap-server localhost:9092 --topic second_topic

# other terminal
kafka-console-producer --bootstrap-server localhost:9092 --producer-property partitioner.class=org.apache.kafka.clients.producer.RoundRobinPartitioner --topic second_topic

# consuming from beginning
kafka-console-consumer --bootstrap-server localhost:9092 --topic second_topic --from-beginning

# display key, values and timestamp in consumer
kafka-console-consumer --bootstrap-server localhost:9092 --topic second_topic --formatter kafka.tools.DefaultMessageFormatter --property print.timestamp=true --property print.key=true --property print.value=true --property print.partition=true --from-beginning


# create a topic with 3 partitions
kafka-topics --bootstrap-server localhost:9092 --topic third_topic --create --partitions 3

# start one consumer
kafka-console-consumer --bootstrap-server localhost:9092 --topic third_topic --group my-first-application

# start one producer and start producing
kafka-console-producer --bootstrap-server localhost:9092 --producer-property partitioner.class=org.apache.kafka.clients.producer.RoundRobinPartitioner --topic third_topic

# start another consumer part of the same group. See messages being spread
kafka-console-consumer --bootstrap-server localhost:9092 --topic third_topic --group my-first-application

# start another consumer part of a different group from beginning
kafka-console-consumer --bootstrap-server localhost:9092 --topic third_topic --group my-second-application --from-beginning





# documentation for the command 
kafka-consumer-groups

# list consumer groups
kafka-consumer-groups --bootstrap-server localhost:9092 --list
 
# describe one specific group
kafka-consumer-groups --bootstrap-server localhost:9092 --describe --group my-second-application

# describe another group
kafka-consumer-groups --bootstrap-server localhost:9092 --describe --group my-first-application

# start a consumer
kafka-console-consumer --bootstrap-server localhost:9092 --topic first_topic --group my-first-application

# describe the group now
kafka-consumer-groups --bootstrap-server localhost:9092 --describe --group my-first-application

# describe a console consumer group (change the end number)
kafka-consumer-groups --bootstrap-server localhost:9092 --describe --group console-consumer-10592

# start a console consumer
kafka-console-consumer --bootstrap-server localhost:9092 --topic first_topic --group my-first-application

# describe the group again